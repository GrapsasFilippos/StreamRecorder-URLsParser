#!/usr/bin/php
<?php

namespace com\grapsas\streamRecorder\urlParser;


include_once( dirname( __FILE__ ). '/URLListItem.inc' );
include_once( dirname( __FILE__ ). '/../lib/PHP-CLI-Progress-Bar/ProgressBar/Manager.php' );
include_once( dirname( __FILE__ ). '/../lib/PHP-CLI-Progress-Bar/ProgressBar/Registry.php' );


class Parser {

  const CLI_OPTIONS = 'dj::';
  
  
  private $iDir;
  private $file2Parse;
  
  
  public function __construct() {
    global $argv;
    
    // Init
    $this->iDir = dirname( __FILE__ ). '/';
    
    // Init arguments
    if( count( $argv ) == 1 ) {
      throw new \Exception( 'Missing last argument (file to parse)' );
    }
    $this->file2Parse =  $this->iDir. $argv[ count( $argv ) - 1 ];
    if( !is_file( $this->file2Parse ) ) {
      throw new \Exception( 'Is not a file: '. $this->file2Parse );
    }
    
    // Run
    $urlItems = self::parse( $this->file2Parse );
    $cliOptions = getopt( self::CLI_OPTIONS );
    self::print_i( $urlItems, $cliOptions );
  }
  
  
  public static function parse( $path ) {
    
    $fData = file_get_contents( $path );
    
    $urls = [];
    preg_match_all(
      '/<i[^>]*\'([^\']*listen\.pls[^\']*)\'\);/', $fData, $matches );
    foreach( $matches[ 1 ] as $m )
      $urls []= $m;
//     print_r( $urls );
    
    $matches = [];
    $titles = [];
    preg_match_all( '/^[^<]*<h4[^>]*>(.*)<\/h4>/m', $fData, $matches );
    foreach( $matches[ 1 ] as $m )
      $titles [] = trim( strip_tags( $m ) );
//     print_r( $titles );

    $progressBar = new \ProgressBar\Manager( 0, count( $urls ) );
    $urlItems = [];
    $i = 0;
    $progressBar->update( 0 );
    while( count( $urls ) > 0 ) {
      $urlItems []= new URLListItem( array_pop( $urls ), array_pop( $titles ) );
      $i++;
      $progressBar->update( $i );
    }
    
    return $urlItems;
  }
  
  
  public static function print_i( array $urlItems, array $cliOptions ) {
    if( isset( $cliOptions[ 'j' ] ) ) {
      self::print_json( $urlItems, $cliOptions[ 'j' ] == 1 ? 1 : 0 );
    }
    else {
      self::print_debug( $urlItems );
    }
  }
  
  public static function print_debug( array $urlItems ) {
    foreach( $urlItems as $urlItem )
      echo $urlItem. PHP_EOL;
  }
  
  public static function print_json( array $urlItems, $pretty = 0 ) {
    $arr = [];
    $flags = 0;
    
    if( $pretty == 1 ) {
      $flags |= JSON_PRETTY_PRINT;
    }
    
    foreach( $urlItems as $urlItem )
      $arr []= [
        'title' => $urlItem->getTitle(),
        'url' => $urlItem->getUrl(),
      ];
    echo json_encode( $arr, $flags ). PHP_EOL;
  }
}


new Parser();
