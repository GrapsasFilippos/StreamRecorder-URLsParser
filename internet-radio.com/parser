#!/usr/bin/php
<?php

namespace com\grapsas\streamRecorder\urlParser;


include_once( dirname( __FILE__ ). '/URLListItem.inc' );


class Parser {

  private $iDir;
  private $file2Parse;
  
  
  public function __construct() {
    global $argv;
    
    // Init
    $this->iDir = dirname( __FILE__ ). '/';
    
    // Init arguments
    if( !isset( $argv[ 1 ] ) ) {
      throw new Exception( 'Missing first argument (file to parse)' );
    }
    $this->file2Parse =  $this->iDir. $argv[ 1 ];
    if( !is_file( $this->file2Parse ) ) {
      throw new Exception( 'Is not a file: '. $this->file2Parse );
    }
    
    // Run
    $urlItems = $this->parse( $this->file2Parse );
    foreach( $urlItems as $urlItem )
      echo $urlItem. PHP_EOL;
  }
  
  
  public function parse( $path ) {
    $fData = file_get_contents( $path );
    
    $urls = [];
    preg_match_all( '/<i[^>]*\'([^\']*listen\.pls[^\']*)\'\);/', $fData, $matches );
    foreach( $matches[ 1 ] as $m )
      $urls []= $m;
//     print_r( $urls );
    
    $matches = [];
    $titles = [];
    preg_match_all( '/^[^<]*<h4[^>]*>(.*)<\/h4>/m', $fData, $matches );
    foreach( $matches[ 1 ] as $m )
      $titles [] = trim( strip_tags( $m ) );
//     print_r( $titles );

    $urlItems = [];
    while( count( $urls ) > 0 ) {
      $urlItems []= new URLListItem( array_pop( $urls ), array_pop( $titles ) );
    }
    
    return $urlItems;
  }
  
}


new Parser();
